pd.to_datetime, pd.DatetimeIndex.

pandas
convert sec from midnight to UTC timestamp compatible with KDB:
	1. localts = pd.to_datetime(sfm + pd.to_datetime(datestr).asm8.astype('int64')/1e9, unit='s')
	2. utcts = pd.to_datetime( pd.DatetimeIndex(localts, tz='US/Eastern').tz_convert('UTC').asi8) convert to timezone unaware time stamps

pd.merge(l, r, on='common_col')
pd.merge(l, r, left_on='left_col', right_on='right_col', how='left') this will join two tables without them having same name col, and thus will retain two cols (which would be identical), how='left' will retain left table rows where no match is found from right table.

re.match:
r'%s\.?\s*([\*0-9]*)\s*=\s*(.*)'%field
	r'...' make sure \. is interpreted literally, \s* will match (as much as possible) zero or one or more space, \s*(.*) captures the chars after the space (if any)

connecting folder name to form a path:
	'/'.join(lists of foldernames) 			note this will avoid using f1 + '/' + f2, making code more compact





oct 14
if you want to auto convert str to a date, it's good to use pandas.to_datetime(), which has certain smartness in parsing the string: it supposes '2015-05-02', '2015.05.02', '2015/05/02', '20150502', '2015-May-02', for the cases I tested. And this interface doesn't take extra argument to specify which format to use.

From there, convert to the ISO format of 'yyyy-mm-dd' or q recognizable 'yyyy.mm.dd', by 
	pd.to_datetime(somestr).date().isoformat()
	or,
	pd.to_datetime(somestr).date().strftime('%Y.%m.%d')
note that all of this is based on pandas.tslib.Timestamp, which is a single object not an array. pd.to_datetime() can also work on arrays of strings, but the result will be pandas.tseries.index.DatetimeIndex. 
